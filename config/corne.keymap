/*
=== === === === === === === === === === === ===
    INCLUDES
=== === === === === === === === === === === ===
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "../config/includes/helper.h"
#include "../config/includes/keypos_42keys.h"
#include "../config/includes/parameters.h"
// #include "../config/includes/combos_movement.dtsi"
// #include "../config/includes/combos_shortcuts.dtsi"
#include "../config/includes/behaviours_homerow_mods.dtsi"

//=========================
//  COMBO DEFINITION
//=========================
ZMK_COMBO(egaming,      &tog L_GAMING,      RT5 RM5 RB5,    L_HOME L_GAMING,        COMBO_TERM_SLOW)
ZMK_COMBO(delete,       &kp DELETE,         RT4 RT5,        L_HOME L_EXT,           COMBO_TERM_FAST)
ZMK_COMBO(enter,        &kp ENTER,          RM4 RM5,        L_HOME,                 COMBO_TERM_FAST)
ZMK_COMBO(insert,       &kp INSERT,         RB4 RB5,        L_HOME,                 COMBO_TERM_FAST)
ZMK_COMBO(caps,         &kp CAPSLOCK,       LB5 LB4,        L_HOME,                 COMBO_TERM_FAST)
ZMK_COMBO(btclr,        &bt BT_CLR,         LT5 LM5 LB5,    L_MEDIA,                COMBO_TERM_SLOW)
// Movement
ZMK_COMBO(arrow_up,     &kp UP,             RT1 RM1,        L_HOME,                 COMBO_TERM_SLOW)
ZMK_COMBO(arrow_down,   &kp DOWN,           RM1 RB1,        L_HOME,                 COMBO_TERM_SLOW)
ZMK_COMBO(arrow_left,   &kp LEFT,           RM0 RM1,        L_HOME,                 COMBO_TERM_FAST)
ZMK_COMBO(arrow_right,  &kp RIGHT,          RM1 RM2,        L_HOME,                 COMBO_TERM_FAST)
ZMK_COMBO(page_up,      &kp PAGE_UP,        RT0 RM0,        L_HOME,                 COMBO_TERM_SLOW)
ZMK_COMBO(page_down,    &kp PAGE_DOWN,      RM0 RB0,        L_HOME,                 COMBO_TERM_SLOW)
ZMK_COMBO(home,         &kp HOME,           RT2 RM2,        L_HOME,                 COMBO_TERM_SLOW)
ZMK_COMBO(end,          &kp END,            RM2 RB2,        L_HOME,                 COMBO_TERM_SLOW)
// Shortcuts
ZMK_COMBO(select_all,   &kp C_SELECT_ALL,   LM4 LM3,        L_HOME,                 COMBO_TERM_FAST)
ZMK_COMBO(save,         &kp C_SAVE,         LM3 LM2,        L_HOME,                 COMBO_TERM_FAST)
ZMK_COMBO(find,         &kp C_FIND,         LM1 LM0,        L_HOME,                 COMBO_TERM_FAST)
ZMK_COMBO(cut,          &kp C_CUT,          LB3 LB2,        L_HOME,                 COMBO_TERM_FAST)
ZMK_COMBO(copy,         &kp C_COPY,         LB2 LB1,        L_HOME,                 COMBO_TERM_FAST)
ZMK_COMBO(paste,        &kp C_PASTE,        LB1 LB0,        L_HOME,                 COMBO_TERM_FAST)
ZMK_COMBO(undo,         &kp C_UNDO,         LT5 LT4 LT3,    L_HOME,                 COMBO_TERM_FAST)
ZMK_COMBO(redo,         &kp C_REDO,         RT3 RT4 RT5,    L_HOME,                 COMBO_TERM_FAST)



/ {
    keymap {
        compatible = "zmk,keymap";
        default_layer {
            label = "Home";
            bindings = <
                    &kp ESC    &kp Q          &kp W         &kp E          &kp R           &kp T     /**/ &kp Y     &kp U           &kp I          &kp O         &kp P            &kp BSPC
                    &kp TAB    &hm_l  LGUI A  &hm_l  LALT S &hm_l  LCTRL D &hms_l  LSHFT F &kp G     /**/ &kp H     &hms_r  RSHFT J &hm_r  RCTRL K &hm_r  RALT L &hm_r  RGUI SEMI &kp SQT
                    &none      &kp Z          &kp X         &kp C          &kp V           &kp B     /**/ &kp N     &kp M           &kp COMMA      &kp DOT       &kp FSLH         &none
                                                      &mo L_FUNC  &mo L_NUM   &kp SPACE /**/ &kp SPACE &mo L_EXT   &mo L_MEDIA
            >;
        };
        numeric_layer {
            label = "Numeric";
            bindings = <
                    &none  &none    &none    &none      &none      &none    /**/  &kp KP_MULTIPLY   &kp N7  &kp N8  &kp N9  &kp MINUS      &kp EQUAL
                    &trans &kp LGUI &kp LALT &kp LCTRL  &kp LSHFT  &none    /**/  &kp FSLH          &kp N4  &kp N5  &kp N6  &kp PLUS       &kp ENTER
                    &none  &none    &none    &none      &none      &none    /**/  &kp N0            &kp N1  &kp N2  &kp N3  &kp LESS_THAN  &kp GREATER_THAN
                                             &none      &none      &none    /**/  &trans            &trans  &trans
            >;
        };
        func_layer {
            label = "Func.";
            bindings = <
                    &none  &none    &none    &none      &none      &none    /**/  &kp F1   &kp F2  &kp F3  &kp F4  &kp F5  &kp F6
                    &trans &kp LGUI &kp LALT &kp LCTRL  &kp LSHFT  &none    /**/  &kp F7   &kp F8  &kp F9  &kp F10 &kp F11 &kp F12
                    &none  &none    &none    &none      &none      &none    /**/  &none    &none   &none   &none   &none   &kp PRCNT
                                             &none      &none      &none    /**/  &trans   &trans  &trans
            >;
        };
        ext_layer {
            label = "Ext.";
            bindings = <
                    &none     &kp EXCL  &kp AT    &kp HASH  &kp DLLR   &kp PRCNT  /**/   &kp CARET &kp AMPS  &none     &none    &none    &none
                    &kp TILDE &kp LPAR  &kp RPAR  &kp FSLH  &kp LBKT   &kp RBKT   /**/   &none     &kp RSHFT &kp RCTRL &kp RALT &kp RGUI &none
                    &kp UNDER &kp LBRC  &kp RBRC  &kp BSLH  &kp GRAVE  &kp PIPE   /**/   &none     &none     &none     &none    &none    &none
                                                  &trans    &trans     &trans     /**/   &trans    &trans    &trans
            >;
        };
        media_layer {
            label = "Media";
            bindings = <
                    &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3  &bt BT_SEL 4  /**/  &none  &none  &none  &none &kp C_PREV &kp C_VOL_UP
                    &none &none        &none        &none        &none         &none         /**/  &none  &none  &none  &none &kp C_PP &kp C_MUTE
                    &none &none        &none        &none        &out OUT_USB  &out OUT_BLE  /**/  &none  &none  &none  &none &kp C_NEXT &kp C_VOL_DN
                                                    &trans       &trans        &trans        /**/  &trans &trans &trans
            >;
        };
        gaming_layer {
            label = "Gaming";
            bindings = <
                            &kp ESC      &kp Q  &kp W      &kp E       &kp R        &kp T          /**/    &kp Y        &kp U      &kp I      &kp O     &kp P       &kp BSPC
                            &kp TAB      &kp A  &kp S      &kp D       &kp F        &kp G          /**/    &kp H        &kp J      &kp K      &kp L     &kp SEMI    &kp ENTER
                            &kp LSHFT    &kp Z  &kp X      &kp C       &kp V        &kp B          /**/    &kp N        &kp M      &kp COMMA  &kp DOT   &kp FSLH    &kp RSHIFT
                                                           &kp LCTRL   &kp LALT     &kp SPACE      /**/    &kp SPACE    &none      &kp RALT
            >;
        };

    };
};
