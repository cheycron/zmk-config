/*
=== === === === === === === === === === === ===
    INCLUDES
=== === === === === === === === === === === ===
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "../config/includes/keypos_42keys.h"
#include "../config/includes/parameters.h"
#include "../config/includes/combos_movement.dtsi"
#include "../config/includes/combos_shortcuts.dtsi"

/ {
    behaviors {
        ht: hold_tap { label = "hold_tap"; compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; flavor = "tap-preferred"; tapping-term-ms = <180>; quick-tap-ms = <150>; global-quick-tap; bindings = <&kp>, <&kp>; };
    };

    combos {
        compatible = "zmk,combos";
        combo_egaming { timeout-ms = <FAST_COMBO_TIMEOUT>; bindings = <&tog L_GAMING>; key-positions = <11 23 35>; layers = <L_HOME L_GAMING>; };
        combo_delete { timeout-ms = <FAST_COMBO_TIMEOUT>; bindings = <&kp DELETE>; key-positions = <10 11>; layers = <L_HOME L_EXT>; };
        combo_enter { timeout-ms = <FAST_COMBO_TIMEOUT>; bindings = <&kp ENTER>; key-positions = <22 23>; layers = <L_HOME>; };
        combo_insert { timeout-ms = <FAST_COMBO_TIMEOUT>; bindings = <&kp INSERT>; key-positions = <34 35>; layers = <L_HOME>; };
        combo_caps { timeout-ms = <FAST_COMBO_TIMEOUT>; bindings = <&sk CAPSLOCK>; key-positions = <24 25>; layers = <L_HOME>; };
        combo_btclr { timeout-ms = <FAST_COMBO_TIMEOUT>; bindings = <&bt BT_CLR>; key-positions = <39 40  41>; layers = <L_MEDIA>; };
        };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            label = "Home";
            bindings = <
                    &kp ESC    &kp Q       &kp W      &kp E       &kp R       &kp T     /**/ &kp Y     &kp U       &kp I       &kp O      &kp P         &kp BSPC
                    &kp TAB    &ht LGUI A  &ht LALT S &ht LCTRL D &ht LSHFT F &kp G     /**/ &kp H     &ht RSHFT J &ht RCTRL K &ht RALT L &ht RGUI SEMI &kp SQT
                    &none      &kp Z       &kp X      &kp C       &kp V       &kp B     /**/ &kp N     &kp M       &kp COMMA   &kp DOT    &kp FSLH      &none
                                                      &mo L_FUNC  &mo L_NUM   &kp SPACE /**/ &kp SPACE &mo L_EXT   &mo L_MEDIA
            >;
        };
        numeric_layer {
            label = "Numeric";
            bindings = <
                    &none  &none    &none    &none      &none      &none    /**/  &kp KP_MULTIPLY   &kp N7  &kp N8  &kp N9  &kp MINUS   &kp EQUAL
                    &trans &kp LGUI &kp LALT &kp LCTRL  &kp LSHFT  &none    /**/  &kp FSLH          &kp N4  &kp N5  &kp N6  &kp PLUS    &kp LESS_THAN
                    &none  &none    &none    &none      &none      &none    /**/  &kp N0            &kp N1  &kp N2  &kp N3  &kp ENTER   &kp GREATER_THAN
                                             &none      &none      &none    /**/  &trans            &trans  &trans
            >;
        };
        func_layer {
            label = "Func.";
            bindings = <
                    &none  &none    &none    &none      &none      &none    /**/  &kp F1   &kp F2  &kp F3  &kp F4  &kp F5  &kp F6
                    &trans &kp LGUI &kp LALT &kp LCTRL  &kp LSHFT  &none    /**/  &kp F7   &kp F8  &kp F9  &kp F10 &kp F11 &kp F12
                    &none  &none    &none    &none      &none      &none    /**/  &none    &none   &none   &none   &none   &kp PRCNT
                                             &none      &none      &none    /**/  &trans   &trans  &trans
            >;
        };
        ext_layer {
            label = "Ext.";
            bindings = <
                    &none     &kp EXCL  &kp AT    &kp HASH  &kp DLLR   &kp PRCNT  /**/   &kp CARET &kp AMPS  &none     &none    &none    &none
                    &kp TILDE &kp LPAR  &kp RPAR  &kp FSLH  &kp LBKT   &kp RBKT   /**/   &none     &kp RSHFT &kp RCTRL &kp RALT &kp RGUI &none
                    &kp UNDER &kp LBRC  &kp RBRC  &kp BSLH  &kp GRAVE  &kp PIPE   /**/   &none     &none     &none     &none    &none    &none
                                                  &trans    &trans     &trans     /**/   &trans    &trans    &trans
            >;
        };
        media_layer {
            label = "Media";
            bindings = <
                    &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3  &bt BT_SEL 4  /**/  &none  &none  &none  &none &kp C_PREV &kp C_VOL_UP
                    &none &none        &none        &none        &none         &none         /**/  &none  &none  &none  &none &kp C_PP &kp C_MUTE
                    &none &none        &none        &none        &out OUT_USB  &out OUT_BLE  /**/  &none  &none  &none  &none &kp C_NEXT &kp C_VOL_DN
                                                    &trans       &trans        &trans        /**/  &trans &trans &trans
            >;
        };
        gaming_layer {
            label = "Gaming";
            bindings = <
                            &kp ESC      &kp Q  &kp W      &kp E       &kp R        &kp T          /**/    &kp Y        &kp U      &kp I      &kp O     &kp P       &kp BSPC
                            &kp TAB      &kp A  &kp S      &kp D       &kp F        &kp G          /**/    &kp H        &kp J      &kp K      &kp L     &kp SEMI    &kp ENTER
                            &kp LSHFT    &kp Z  &kp X      &kp C       &kp V        &kp B          /**/    &kp N        &kp M      &kp COMMA  &kp DOT   &kp FSLH    &kp RSHIFT
                                                           &kp LCTRL   &kp LALT     &kp SPACE      /**/    &kp SPACE    &none      &kp RALT
            >;
        };

    };
};
