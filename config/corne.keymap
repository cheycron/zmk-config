/*
  ╭────────────────────────╮ ╭────────────────────────╮
  │ 0   1   2   3   4   5  │ │ 6   7   8   9   10  11 │
  │ 12  13  14  15  16  17 │ │ 18  19  19  20  22  23 │
  │ 24  25  26  27  28  29 │ │ 30  31  32  33  34  35 │
  ╰───────────╮ 36  37  38 │ │ 39  40  41 ╭───────────╯
              ╰────────────╯ ╰────────────╯
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

// Behavior configuration
&mt { tapping-term-ms = <200>; quick_tap_ms = <0>; flavor = "tap-preferred"; };
&lt { tapping-term-ms = <200>; quick_tap_ms = <0>; flavor = "tap-preferred"; };
&sk { release-after-ms = <500>; quick-release; };

/ {
    behaviors {
        b_alt_f1: alt_f1 { compatible = "zmk,behavior-mod-morph"; label = "alt_f1"; #binding-cells = <0>; bindings = <&kp F1>, <&kp LA(F1)>; mods = <(MOD_RALT)>; };
        b_alt_f2: alt_f2 { compatible = "zmk,behavior-mod-morph"; label = "alt_f2"; #binding-cells = <0>; bindings = <&kp F2>, <&kp LA(F2)>; mods = <(MOD_RALT)>; };
        b_alt_f3: alt_f3 { compatible = "zmk,behavior-mod-morph"; label = "alt_f3"; #binding-cells = <0>; bindings = <&kp F3>, <&kp LA(F3)>; mods = <(MOD_RALT)>; };
        b_alt_f4: alt_f4 { compatible = "zmk,behavior-mod-morph"; label = "alt_f4"; #binding-cells = <0>; bindings = <&kp F4>, <&kp LA(F4)>; mods = <(MOD_RALT)>; };
        b_alt_f5: alt_f5 { compatible = "zmk,behavior-mod-morph"; label = "alt_f5"; #binding-cells = <0>; bindings = <&kp F5>, <&kp LA(F5)>; mods = <(MOD_RALT)>; };
        b_alt_f6: alt_f6 { compatible = "zmk,behavior-mod-morph"; label = "alt_f6"; #binding-cells = <0>; bindings = <&kp F6>, <&kp LA(F6)>; mods = <(MOD_RALT)>; };
        b_alt_f7: alt_f7 { compatible = "zmk,behavior-mod-morph"; label = "alt_f7"; #binding-cells = <0>; bindings = <&kp F7>, <&kp LA(F7)>; mods = <(MOD_RALT)>; };
        b_alt_f8: alt_f8 { compatible = "zmk,behavior-mod-morph"; label = "alt_f8"; #binding-cells = <0>; bindings = <&kp F8>, <&kp LA(F8)>; mods = <(MOD_RALT)>; };
        b_alt_f9: alt_f9 { compatible = "zmk,behavior-mod-morph"; label = "alt_f9"; #binding-cells = <0>; bindings = <&kp F9>, <&kp LA(F9)>; mods = <(MOD_RALT)>; };
        b_alt_f10: alt_f10 { compatible = "zmk,behavior-mod-morph"; label = "alt_f10"; #binding-cells = <0>; bindings = <&kp F10>, <&kp LA(F10)>; mods = <(MOD_RALT)>; };
        b_alt_f11: alt_f11 { compatible = "zmk,behavior-mod-morph"; label = "alt_f11"; #binding-cells = <0>; bindings = <&kp F11>, <&kp LA(F11)>; mods = <(MOD_RALT)>; };
        b_alt_f12: alt_f12 { compatible = "zmk,behavior-mod-morph"; label = "alt_f12"; #binding-cells = <0>; bindings = <&kp F12>, <&kp LA(F12)>; mods = <(MOD_RALT)>; };
    };

    combos {
        compatible = "zmk,combos";
        combos_delete { bindings = <&kp DELETE>; key-positions = <10 11>; layers = <0 2>; };
        combos_enter { bindings = <&kp ENTER>; key-positions = <22 23>; layers = <0>; };
        combos_insert { bindings = <&kp  INSERT>; key-positions = <34 35>; layers = <0>; };
        combos_tab { bindings = <LA(TAB)>; key-positions = <12 13>; layers = <0>; };
        combos_caps { bindings = <&caps_word>; key-positions = <24 25>; layers = <0>; };
        combos_alt { bindings = <&kp LEFT_ALT>; key-positions = <36 37>; layers = <0>; };
        combos_btclr { bindings = <&bt BT_CLR>; key-positions = <39 40  41>; layers = <3>; };
        combos_select_all { bindings = <&kp LC(A)>; key-positions = <13 14>; layers = <0>; };
        combos_save { bindings = <&kp LC(S)>; key-positions = <14 15>; layers = <0>; };
        combos_find { bindings = <&kp LC(F)>; key-positions = <16 17>; layers = <0>; };
        combos_cut { bindings = <&kp LC(X)>; key-positions = <26 27>; layers = <0>; };
        combos_copy { bindings = <&kp LC(C)>; key-positions = <27 28>; layers = <0>; };
        combos_paste { bindings = <&kp LC(V)>; key-positions = <28 29>; layers = <0>; };
        combos_undo { bindings = <&kp LC(Z)>; key-positions = <0 1 2>; layers = <0>; };
        combos_redo { bindings = <&kp LC(Y)>; key-positions = <9 10 11>; layers = <0>; };
        combos_f1 { bindings = <&b_alt_f1>; key-positions = <0 12>; layers = <0>; };
        combos_f2 { bindings = <&b_alt_f2>; key-positions = <1 13>; layers = <0>; };
        combos_f3 { bindings = <&b_alt_f3>; key-positions = <2 14>; layers = <0>; };
        combos_f4 { bindings = <&b_alt_f4>; key-positions = <3 15>; layers = <0>; };
        combos_f5 { bindings = <&b_alt_f5>; key-positions = <4 16>; layers = <0>; };
        combos_f6 { bindings = <&b_alt_f6>; key-positions = <5 17>; layers = <0>; };
        combos_f7 { bindings = <&b_alt_f7>; key-positions = <6 18>; layers = <0>; };
        combos_f8 { bindings = <&b_alt_f8>; key-positions = <7 19>; layers = <0>; };
        combos_f9 { bindings = <&b_alt_f9>; key-positions = <8 20>; layers = <0>; };
        combos_f10 { bindings = <&b_alt_f10>; key-positions = <9 21>; layers = <0>; };
        combos_f11 { bindings = <&b_alt_f11>; key-positions = <10 22>; layers = <0>; };
        combos_f12 { bindings = <&b_alt_f12>; key-positions = <11 23>; layers = <0>; };
    };


    keymap {
        compatible = "zmk,keymap";
        default_layer {
            label = "Home";
            bindings = <
  &lt 3 ESC    &kp Q  &kp W      &kp E     &kp R      &kp T          &kp Y  &kp U      &kp I      &kp O     &kp P       &kp BSPC
  &lt 4 TAB    &kp A  &kp S      &kp D     &kp F      &kp G          &kp H  &kp J      &kp K      &kp L     &kp SEMI    &kp SQT
  &kp LSHFT    &kp Z  &kp X      &kp C     &kp V      &kp B          &kp N  &kp M      &kp COMMA  &kp DOT   &kp FSLH    &kp RSHIFT
                           &kp LCTRL  &kp LWIN  &kp SPACE          &lt 1 SPACE  &mo 2   &kp RALT
            >;
        };
       lower_layer {
            label = "Function";
            bindings = <
  &kp ESC    &none   &none   &none        &none        &none        &kp PAGE_UP  &kp UP      &kp PAGE_DOWN   &kp N7  &kp N8  &kp N9
  &kp TAB    &none   &none   &none        &none        &none        &kp LEFT     &kp DOWN    &kp RIGHT       &kp N4  &kp N5  &kp N6
  &kp LSHFT  &none   &none   &none        &none        &kp PSCRN    &kp HOME     &kp END     &kp N0          &kp N1  &kp N2  &kp N3
                             &kp LCTRL    &kp LWIN     &kp SPACE    &trans       &trans       &kp RALT
            >;
        };
        raise_layer {
            label = "Extend";
            bindings = <
  &kp ESC     &kp EXCL       &kp AT             &kp HASH   &kp DLLR    &kp PRCNT   &kp CARET   &kp AMPS    &kp KP_MULTIPLY  &kp LPAR   &kp RPAR  &kp BSPC
  &kp TAB     &kp TILDE      &none              &none      &none       &none       &kp MINUS   &kp EQUAL   &kp FSLH         &kp LBKT   &kp RBKT  &kp SQT
  &kp LSHFT   &kp LESS_THAN  &kp GREATER_THAN   &kp BSLH   &kp GRAVE   &kp PIPE    &kp UNDER   &kp PLUS    &kp BSLH         &kp LBRC   &kp RBRC  &kp RSHIFT
                             &kp LCTRL          &kp LWIN   &kp SPACE   &trans      &trans      &kp RALT
            >;
        };
        bluetooth_layer {
            label = "Bluetooth";
            bindings = <
  &none  &none   &none  &none   &none     &none         &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3  &bt BT_SEL 4 &bt BT_SEL 5 &bt BT_SEL 6
  &none  &none   &none  &none   &none     &none         &none        &none        &none         &none        &none        &none
  &none  &none   &none  &none   &none     &none         &none        &none        &none         &none        &none        &none
                        &none   &none     &none         &none        &none        &none
            >;
        };
        media_layer {
            label = "Media";
            bindings = <
  &none  &none   &none  &none   &none     &none         &kp C_PREV   &kp C_PP      &kp C_NEXT   &none        &none        &kp C_VOL_UP
  &none  &none   &none  &none   &none     &none         &none        &none        &none         &none        &none        &kp C_MUTE
  &none  &none   &none  &none   &none     &none         &none        &none        &none         &none        &none        &kp C_VOL_DN
                        &none   &none     &none         &none        &none        &none
            >;
        };
    };
};
