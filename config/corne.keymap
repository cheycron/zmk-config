/*
  ╭────────────────────────╮ ╭────────────────────────╮
  │ 0   1   2   3   4   5  │ │ 6   7   8   9   10  11 │
  │ 12  13  14  15  16  17 │ │ 18  19  19  20  22  23 │
  │ 24  25  26  27  28  29 │ │ 30  31  32  33  34  35 │
  ╰───────────╮ 36  37  38 │ │ 39  40  41 ╭───────────╯
              ╰────────────╯ ╰────────────╯
*/

// TODO:
// Implementar Home Row.
// Con homerow activado, sobran teclas para layers.
// Con las teclas que sobran para layers, tratar de que los activadores de layers esten en ambas manos.
// Buscar como hacer double tap rapido para cambiar el behavior de la tecla.

/*
=== === === === === === === === === === === ===
    INCLUDES
=== === === === === === === === === === === ===
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "../config/keypos_42keys.h"

// Layer Names
#define LAYER_HOME 0
#define LAYER_FUNC 1
#define LAYER_EXT 2
#define LAYER_MEDIA 3
#define LAYER_GAMING 4
#define SLOW_COMBO_TIMEOUT 40
#define FAST_COMBO_TIMEOUT 30

// Behavior configuration
&mt { tapping-term-ms = <200>; quick_tap_ms = <0>; flavor = "tap-preferred"; };
&lt { tapping-term-ms = <200>; quick_tap_ms = <0>; flavor = "tap-preferred"; };
&sk { release-after-ms = <500>; quick-release; };

/ {
    behaviors {
        // Convert right alt + F to left alt + F
        b_alt_f1: alt_f1 { compatible = "zmk,behavior-mod-morph"; label = "alt_f1"; #binding-cells = <0>; bindings = <&kp F1>, <&kp LA(F1)>; mods = <(MOD_RALT)>; };
        b_alt_f2: alt_f2 { compatible = "zmk,behavior-mod-morph"; label = "alt_f2"; #binding-cells = <0>; bindings = <&kp F2>, <&kp LA(F2)>; mods = <(MOD_RALT)>; };
        b_alt_f3: alt_f3 { compatible = "zmk,behavior-mod-morph"; label = "alt_f3"; #binding-cells = <0>; bindings = <&kp F3>, <&kp LA(F3)>; mods = <(MOD_RALT)>; };
        b_alt_f4: alt_f4 { compatible = "zmk,behavior-mod-morph"; label = "alt_f4"; #binding-cells = <0>; bindings = <&kp F4>, <&kp LA(F4)>; mods = <(MOD_RALT)>; };
        b_alt_f5: alt_f5 { compatible = "zmk,behavior-mod-morph"; label = "alt_f5"; #binding-cells = <0>; bindings = <&kp F5>, <&kp LA(F5)>; mods = <(MOD_RALT)>; };
        b_alt_f6: alt_f6 { compatible = "zmk,behavior-mod-morph"; label = "alt_f6"; #binding-cells = <0>; bindings = <&kp F6>, <&kp LA(F6)>; mods = <(MOD_RALT)>; };
        b_alt_f7: alt_f7 { compatible = "zmk,behavior-mod-morph"; label = "alt_f7"; #binding-cells = <0>; bindings = <&kp F7>, <&kp LA(F7)>; mods = <(MOD_RALT)>; };
        b_alt_f8: alt_f8 { compatible = "zmk,behavior-mod-morph"; label = "alt_f8"; #binding-cells = <0>; bindings = <&kp F8>, <&kp LA(F8)>; mods = <(MOD_RALT)>; };
        b_alt_f9: alt_f9 { compatible = "zmk,behavior-mod-morph"; label = "alt_f9"; #binding-cells = <0>; bindings = <&kp F9>, <&kp LA(F9)>; mods = <(MOD_RALT)>; };
        b_alt_f10: alt_f10 { compatible = "zmk,behavior-mod-morph"; label = "alt_f10"; #binding-cells = <0>; bindings = <&kp F10>, <&kp LA(F10)>; mods = <(MOD_RALT)>; };
        b_alt_f11: alt_f11 { compatible = "zmk,behavior-mod-morph"; label = "alt_f11"; #binding-cells = <0>; bindings = <&kp F11>, <&kp LA(F11)>; mods = <(MOD_RALT)>; };
        b_alt_f12: alt_f12 { compatible = "zmk,behavior-mod-morph"; label = "alt_f12"; #binding-cells = <0>; bindings = <&kp F12>, <&kp LA(F12)>; mods = <(MOD_RALT)>; };
        b_alt_tab: alt_tab { compatible = "zmk,behavior-mod-morph"; label = "alt_tab"; #binding-cells = <0>; bindings = <&kp TAB>, <&kp LA(TAB)>; mods = <(MOD_RALT)>; };
    };

    combos {
        compatible = "zmk,combos";
        combos_egaming { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&tog LAYER_GAMING>; key-positions = <11 23 35>; layers = <LAYER_HOME LAYER_GAMING>; };
        combos_delete { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&kp DELETE>; key-positions = <10 11>; layers = <LAYER_HOME LAYER_EXT>; };
        combos_enter { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&kp ENTER>; key-positions = <22 23>; layers = <LAYER_HOME>; };
        combos_insert { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&kp  INSERT>; key-positions = <34 35>; layers = <LAYER_HOME>; };
        combos_tab { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&kp LA(TAB)>; key-positions = <12 13>; layers = <LAYER_HOME>; };
        combos_caps { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&sk CAPSLOCK>; key-positions = <24 25>; layers = <LAYER_HOME>; };
        combos_alt { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&kp LEFT_ALT>; key-positions = <36 37>; layers = <LAYER_HOME>; };
        combos_btclr { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&bt BT_CLR>; key-positions = <39 40  41>; layers = <LAYER_MEDIA>; };
        combos_select_all { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&kp LC(A)>; key-positions = <13 14>; layers = <LAYER_HOME>; };
        combos_save { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&kp LC(S)>; key-positions = <14 15>; layers = <LAYER_HOME>; };
        combos_find { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&kp LC(F)>; key-positions = <16 17>; layers = <LAYER_HOME>; };
        combos_cut { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&kp LC(X)>; key-positions = <26 27>; layers = <LAYER_HOME>; };
        combos_copy { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&kp LC(C)>; key-positions = <27 28>; layers = <LAYER_HOME>; };
        combos_paste { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&kp LC(V)>; key-positions = <28 29>; layers = <LAYER_HOME>; };
        combos_undo { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&kp LC(Z)>; key-positions = <0 1 2>; layers = <LAYER_HOME>; };
        combos_redo { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&kp LC(Y)>; key-positions = <9 10 11>; layers = <LAYER_HOME>; };
        combos_f1 { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&b_alt_f1>; key-positions = <0 12>; layers = <LAYER_HOME>; };
        combos_f2 { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&b_alt_f2>; key-positions = <1 13>; layers = <LAYER_HOME>; };
        combos_f3 { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&b_alt_f3>; key-positions = <2 14>; layers = <LAYER_HOME>; };
        combos_f4 { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&b_alt_f4>; key-positions = <3 15>; layers = <LAYER_HOME>; };
        combos_f5 { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&b_alt_f5>; key-positions = <4 16>; layers = <LAYER_HOME>; };
        combos_f6 { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&b_alt_f6>; key-positions = <5 17>; layers = <LAYER_HOME>; };
        combos_f7 { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&b_alt_f7>; key-positions = <6 18>; layers = <LAYER_HOME>; };
        combos_f8 { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&b_alt_f8>; key-positions = <7 19>; layers = <LAYER_HOME>; };
        combos_f9 { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&b_alt_f9>; key-positions = <8 20>; layers = <LAYER_HOME>; };
        combos_f10 { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&b_alt_f10>; key-positions = <9 21>; layers = <LAYER_HOME>; };
        combos_f11 { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&b_alt_f11>; key-positions = <10 22>; layers = <LAYER_HOME>; };
        combos_f12 { timeout-ms = <SLOW_COMBO_TIMEOUT>; bindings = <&b_alt_f12>; key-positions = <11 23>; layers = <LAYER_HOME>; };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            label = "Home";
            bindings = <
                            &lt 3 ESC    &kp Q  &kp W      &kp E       &kp R      &kp T          /**/      &kp Y        &kp U      &kp I      &kp O     &kp P       &kp BSPC
                            &b_alt_tab   &kp A  &kp S      &kp D       &kp F      &kp G          /**/      &kp H        &kp J      &kp K      &kp L     &kp SEMI    &kp SQT
                            &kp LSHFT    &kp Z  &kp X      &kp C       &kp V      &kp B          /**/      &kp N        &kp M      &kp COMMA  &kp DOT   &kp FSLH    &kp RSHIFT
                                                           &kp LCTRL   &kp LWIN   &lt 1 SPACE    /**/      &lt 1 SPACE  &mo 2      &kp RALT
            >;
        };
        lower_layer {
            label = "Func.";
            bindings = <
                            &kp ESC    &kp PAGE_UP    &kp UP      &kp HOME     &none      /**/     &kp PSCRN    &kp EQUAL    &kp KP_MULTIPLY   &kp N7  &kp N8  &kp N9  &kp MINUS
                            &b_alt_tab &kp LEFT       &kp DOWN    &kp RIGHT    &none      /**/     &none        &none        &kp FSLH          &kp N4  &kp N5  &kp N6  &kp PLUS
                            &kp LSHFT  &kp PAGE_DOWN  &none       &kp END      &none      /**/     &none        &none        &kp N0            &kp N1  &kp N2  &kp N3  &kp ENTER
                                                      &kp LCTRL   &kp LWIN     &trans     /**/     &trans       &mo 2        &kp RALT
            >;
        };
        raise_layer {
            label = "Ext.";
            bindings = <
                            &kp ESC     &kp EXCL       &kp AT             &kp HASH   &kp DLLR    /**/   &kp PRCNT   &kp CARET   &kp AMPS    &kp KP_MULTIPLY  &kp LPAR   &kp RPAR  &kp BSPC
                            &b_alt_tab  &kp TILDE      &none              &none      &none       /**/   &none       &kp MINUS   &kp EQUAL   &kp FSLH         &kp LBKT   &kp RBKT  &kp SQT
                            &kp LSHFT   &kp LESS_THAN  &kp GREATER_THAN   &kp BSLH   &kp GRAVE   /**/   &kp PIPE    &kp UNDER   &kp PLUS    &kp BSLH         &kp LBRC   &kp RBRC  &kp RSHIFT
                                                       &kp LCTRL          &kp LWIN   &kp SPACE   /**/   &trans      &trans      &kp RALT
            >;
        };
        mediabt_layer {
            label = "Media";
            bindings = <
                            &kp ESC     &bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    /**/     &kp C_PREV   &kp C_PP      &kp C_NEXT    &none       &kp C_VOL_UP   &kp BSPC
                            &b_alt_tab  &none          &none         &none         &none         &none           /**/     &none        &none         &none         &none       &kp C_MUTE     &kp SQT
                            &kp LSHFT   &none          &none         &none         &out OUT_USB  &out OUT_BLE    /**/     &none        &none         &none         &none       &kp C_VOL_DN   &kp RSHIFT
                                                                     &kp LCTRL     &kp LWIN      &kp SPACE       /**/     &lt 1 SPACE  &mo 2         &kp RALT
            >;
        };
        gaming_layer {
            label = "Gaming";
            bindings = <
                            &kp ESC      &kp Q  &kp W      &kp E       &kp R        &kp T          /**/    &kp Y        &kp U      &kp I      &kp O     &kp P       &kp BSPC
                            &b_alt_tab   &kp A  &kp S      &kp D       &kp F        &kp G          /**/    &kp H        &kp J      &kp K      &kp L     &kp SEMI    &kp ENTER
                            &kp LSHFT    &kp Z  &kp X      &kp C       &kp V        &kp B          /**/    &kp N        &kp M      &kp COMMA  &kp DOT   &kp FSLH    &kp RSHIFT
                                                           &kp LCTRL   &kp LALT     &kp SPACE      /**/    &kp SPACE    &none      &kp RALT
            >;
        };
    };
};
